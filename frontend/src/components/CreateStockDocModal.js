import React, { useState, useEffect } from 'react';
import stockService from '../services/stockService';
import warehouseService from '../services/warehouseService';
import { extractErrorMessage } from '../utils/errorUtils';
import './CreateStockDocModal.css';

const STOCK_DOC_TYPES = [
  { value: 'REC_SUPP', label: 'Receive from Supplier', description: 'External receipt' },
  { value: 'REC_RET', label: 'Receive Return', description: 'External receipt' },
  { value: 'ISS_LOAD', label: 'Issue for Load', description: 'External issue' },
  { value: 'ISS_SALE', label: 'Issue for Sale', description: 'External issue' },
  { value: 'ADJ_SCRAP', label: 'Adjustment Scrap', description: 'Stock adjustment' },
  { value: 'ADJ_VARIANCE', label: 'Adjustment Variance', description: 'Stock adjustment' },
  { value: 'REC_FILL', label: 'Receive to Filling', description: 'External receipt' },
  { value: 'TRF_WH', label: 'Transfer Warehouse', description: 'Between warehouses' },
  { value: 'TRF_TRUCK', label: 'Transfer Truck', description: 'Truck operations' }
];

const CreateStockDocModal = ({ isOpen, onClose, onSuccess }) => {
  const [formData, setFormData] = useState({
    doc_type: '',
    source_wh_id: '',
    dest_wh_id: '',
    notes: ''
  });
  const [warehouses, setWarehouses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (isOpen) {
      loadWarehouses();
    }
  }, [isOpen]);

  const loadWarehouses = async () => {
    try {
      const response = await warehouseService.getWarehouses();
      setWarehouses(response.warehouses || []);
    } catch (err) {
      setError('Failed to load warehouses: ' + err.message);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.doc_type) {
      setError('Please select a document type');
      return;
    }

    setLoading(true);
    setError('');

    try {
      // Create the document (document number will be auto-generated by backend)
      const documentData = {
        doc_type: formData.doc_type,
        source_wh_id: formData.source_wh_id || null,
        dest_wh_id: formData.dest_wh_id || null,
        notes: formData.notes || ''
      };

      const response = await stockService.createStockDocument(documentData);
      
      onSuccess(response);
      onClose();
    } catch (err) {
      setError(extractErrorMessage(err.response?.data) || err.message || 'Failed to create document');
    } finally {
      setLoading(false);
    }
  };

  const getWarehouseOptions = () => {
    return warehouses.map(warehouse => (
      <option key={warehouse.id} value={warehouse.id}>
        {warehouse.code} - {warehouse.name}
      </option>
    ));
  };

  const shouldShowSourceWarehouse = () => {
    return ['ISS_LOAD', 'ISS_SALE', 'TRF_WH', 'TRF_TRUCK'].includes(formData.doc_type);
  };

  const shouldShowDestWarehouse = () => {
    return ['REC_SUPP', 'REC_RET', 'REC_FILL', 'ADJ_SCRAP', 'ADJ_VARIANCE', 'TRF_WH', 'TRF_TRUCK'].includes(formData.doc_type);
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Create Stock Document</h3>
          <button className="close-button" onClick={onClose}>&times;</button>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="modal-body">
            <div className="form-group">
              <label htmlFor="doc_type">Document Type *</label>
              <select
                id="doc_type"
                name="doc_type"
                value={formData.doc_type}
                onChange={handleInputChange}
                required
                className="form-control"
              >
                <option value="">Select Document Type</option>
                {STOCK_DOC_TYPES.map(type => (
                  <option key={type.value} value={type.value}>
                    {type.label} - {type.description}
                  </option>
                ))}
              </select>
            </div>

            {shouldShowSourceWarehouse() && (
              <div className="form-group">
                <label htmlFor="source_wh_id">Source Warehouse *</label>
                <select
                  id="source_wh_id"
                  name="source_wh_id"
                  value={formData.source_wh_id}
                  onChange={handleInputChange}
                  required
                  className="form-control"
                >
                  <option value="">Select Source Warehouse</option>
                  {getWarehouseOptions()}
                </select>
              </div>
            )}

            {shouldShowDestWarehouse() && (
              <div className="form-group">
                <label htmlFor="dest_wh_id">Destination Warehouse *</label>
                <select
                  id="dest_wh_id"
                  name="dest_wh_id"
                  value={formData.dest_wh_id}
                  onChange={handleInputChange}
                  required
                  className="form-control"
                >
                  <option value="">Select Destination Warehouse</option>
                  {getWarehouseOptions()}
                </select>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="notes">Notes</label>
              <textarea
                id="notes"
                name="notes"
                value={formData.notes}
                onChange={handleInputChange}
                className="form-control"
                rows="3"
                placeholder="Optional notes about this document"
              />
            </div>

            {error && (
              <div className="error-message">
                {error}
              </div>
            )}
          </div>

          <div className="modal-footer">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={onClose}
              disabled={loading}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="btn btn-primary"
              disabled={loading}
            >
              {loading ? 'Creating...' : 'Create Document'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateStockDocModal; 